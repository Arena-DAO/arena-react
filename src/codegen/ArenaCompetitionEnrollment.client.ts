/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Timestamp, Uint64, CompetitionType, Decimal, EliminationType, EscrowContractInfo, Binary, Admin, Duration, Threshold, PercentageThreshold, FieldActionForString, FieldActionForUint64, FieldActionForUint32, MigrateMsg, Action, Expiration, CompetitionInfoMsg, Coin, FeeInformationForString, ModuleInstantiateInfo, DaoConfigForNull, MemberMsgForString, QueryMsg, EnrollmentFilter, Addr, SudoMsg, EnrollmentEntryResponse, CompetitionInfoResponse, FeeInformationForAddr, ArrayOfEnrollmentEntryResponse, Boolean, OwnershipForString } from "./ArenaCompetitionEnrollment.types";
export interface ArenaCompetitionEnrollmentReadOnlyInterface {
  contractAddress: string;
  enrollments: ({
    filter,
    limit,
    startAfter
  }: {
    filter?: EnrollmentFilter;
    limit?: number;
    startAfter?: Uint128;
  }) => Promise<ArrayOfEnrollmentEntryResponse>;
  enrollment: ({
    enrollmentId
  }: {
    enrollmentId: Uint128;
  }) => Promise<EnrollmentEntryResponse>;
  enrollmentCount: () => Promise<Uint128>;
  isMember: ({
    addr,
    enrollmentId
  }: {
    addr: string;
    enrollmentId: Uint128;
  }) => Promise<Boolean>;
  ownership: () => Promise<OwnershipForString>;
}
export class ArenaCompetitionEnrollmentQueryClient implements ArenaCompetitionEnrollmentReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.enrollments = this.enrollments.bind(this);
    this.enrollment = this.enrollment.bind(this);
    this.enrollmentCount = this.enrollmentCount.bind(this);
    this.isMember = this.isMember.bind(this);
    this.ownership = this.ownership.bind(this);
  }
  enrollments = async ({
    filter,
    limit,
    startAfter
  }: {
    filter?: EnrollmentFilter;
    limit?: number;
    startAfter?: Uint128;
  }): Promise<ArrayOfEnrollmentEntryResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      enrollments: {
        filter,
        limit,
        start_after: startAfter
      }
    });
  };
  enrollment = async ({
    enrollmentId
  }: {
    enrollmentId: Uint128;
  }): Promise<EnrollmentEntryResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      enrollment: {
        enrollment_id: enrollmentId
      }
    });
  };
  enrollmentCount = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      enrollment_count: {}
    });
  };
  isMember = async ({
    addr,
    enrollmentId
  }: {
    addr: string;
    enrollmentId: Uint128;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_member: {
        addr,
        enrollment_id: enrollmentId
      }
    });
  };
  ownership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {}
    });
  };
}
export interface ArenaCompetitionEnrollmentInterface extends ArenaCompetitionEnrollmentReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createEnrollment: ({
    categoryId,
    competitionInfo,
    competitionType,
    durationBefore,
    entryFee,
    escrowContractInfo,
    groupContractInfo,
    maxMembers,
    minMembers,
    requiredTeamSize,
    useDaoHost
  }: {
    categoryId?: Uint128;
    competitionInfo: CompetitionInfoMsg;
    competitionType: CompetitionType;
    durationBefore: number;
    entryFee?: Coin;
    escrowContractInfo: EscrowContractInfo;
    groupContractInfo: ModuleInstantiateInfo;
    maxMembers: Uint64;
    minMembers?: Uint64;
    requiredTeamSize?: number;
    useDaoHost?: DaoConfigForNull;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  finalize: ({
    id
  }: {
    id: Uint128;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  enroll: ({
    id,
    team
  }: {
    id: Uint128;
    team?: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    id,
    team
  }: {
    id: Uint128;
    team?: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  forceWithdraw: ({
    id,
    members
  }: {
    id: Uint128;
    members: string[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  setRankings: ({
    id,
    rankings
  }: {
    id: Uint128;
    rankings: MemberMsgForString[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  editEnrollment: ({
    banner,
    date,
    description,
    duration,
    durationBefore,
    id,
    maxMembers,
    minMembers,
    name,
    requiredTeamSize,
    useDaoHost
  }: {
    banner?: FieldActionForString;
    date?: Timestamp;
    description?: string;
    duration?: number;
    durationBefore?: number;
    id: Uint128;
    maxMembers?: Uint64;
    minMembers?: FieldActionForUint64;
    name?: string;
    requiredTeamSize?: FieldActionForUint32;
    useDaoHost?: DaoConfigForNull;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  revert: ({
    id
  }: {
    id: Uint128;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  migrateEscrow: ({
    escrow,
    escrowCodeId,
    id,
    msg
  }: {
    escrow: string;
    escrowCodeId: number;
    id: Uint128;
    msg: MigrateMsg;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class ArenaCompetitionEnrollmentClient extends ArenaCompetitionEnrollmentQueryClient implements ArenaCompetitionEnrollmentInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createEnrollment = this.createEnrollment.bind(this);
    this.finalize = this.finalize.bind(this);
    this.enroll = this.enroll.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.forceWithdraw = this.forceWithdraw.bind(this);
    this.setRankings = this.setRankings.bind(this);
    this.editEnrollment = this.editEnrollment.bind(this);
    this.revert = this.revert.bind(this);
    this.migrateEscrow = this.migrateEscrow.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
  createEnrollment = async ({
    categoryId,
    competitionInfo,
    competitionType,
    durationBefore,
    entryFee,
    escrowContractInfo,
    groupContractInfo,
    maxMembers,
    minMembers,
    requiredTeamSize,
    useDaoHost
  }: {
    categoryId?: Uint128;
    competitionInfo: CompetitionInfoMsg;
    competitionType: CompetitionType;
    durationBefore: number;
    entryFee?: Coin;
    escrowContractInfo: EscrowContractInfo;
    groupContractInfo: ModuleInstantiateInfo;
    maxMembers: Uint64;
    minMembers?: Uint64;
    requiredTeamSize?: number;
    useDaoHost?: DaoConfigForNull;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_enrollment: {
        category_id: categoryId,
        competition_info: competitionInfo,
        competition_type: competitionType,
        duration_before: durationBefore,
        entry_fee: entryFee,
        escrow_contract_info: escrowContractInfo,
        group_contract_info: groupContractInfo,
        max_members: maxMembers,
        min_members: minMembers,
        required_team_size: requiredTeamSize,
        use_dao_host: useDaoHost
      }
    }, fee_, memo_, funds_);
  };
  finalize = async ({
    id
  }: {
    id: Uint128;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      finalize: {
        id
      }
    }, fee_, memo_, funds_);
  };
  enroll = async ({
    id,
    team
  }: {
    id: Uint128;
    team?: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      enroll: {
        id,
        team
      }
    }, fee_, memo_, funds_);
  };
  withdraw = async ({
    id,
    team
  }: {
    id: Uint128;
    team?: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        id,
        team
      }
    }, fee_, memo_, funds_);
  };
  forceWithdraw = async ({
    id,
    members
  }: {
    id: Uint128;
    members: string[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      force_withdraw: {
        id,
        members
      }
    }, fee_, memo_, funds_);
  };
  setRankings = async ({
    id,
    rankings
  }: {
    id: Uint128;
    rankings: MemberMsgForString[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_rankings: {
        id,
        rankings
      }
    }, fee_, memo_, funds_);
  };
  editEnrollment = async ({
    banner,
    date,
    description,
    duration,
    durationBefore,
    id,
    maxMembers,
    minMembers,
    name,
    requiredTeamSize,
    useDaoHost
  }: {
    banner?: FieldActionForString;
    date?: Timestamp;
    description?: string;
    duration?: number;
    durationBefore?: number;
    id: Uint128;
    maxMembers?: Uint64;
    minMembers?: FieldActionForUint64;
    name?: string;
    requiredTeamSize?: FieldActionForUint32;
    useDaoHost?: DaoConfigForNull;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      edit_enrollment: {
        banner,
        date,
        description,
        duration,
        duration_before: durationBefore,
        id,
        max_members: maxMembers,
        min_members: minMembers,
        name,
        required_team_size: requiredTeamSize,
        use_dao_host: useDaoHost
      }
    }, fee_, memo_, funds_);
  };
  revert = async ({
    id
  }: {
    id: Uint128;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revert: {
        id
      }
    }, fee_, memo_, funds_);
  };
  migrateEscrow = async ({
    escrow,
    escrowCodeId,
    id,
    msg
  }: {
    escrow: string;
    escrowCodeId: number;
    id: Uint128;
    msg: MigrateMsg;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      migrate_escrow: {
        escrow,
        escrow_code_id: escrowCodeId,
        id,
        msg
      }
    }, fee_, memo_, funds_);
  };
  updateOwnership = async (action: Action, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee_, memo_, funds_);
  };
}