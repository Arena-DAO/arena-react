/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, MemberBalanceUnchecked, Cw20Coin, Cw721Collection, Coin, ExecuteMsg, Binary, Decimal, Action, Expiration, Timestamp, Uint64, Cw20ReceiveMsg, Cw721ReceiveMsg, DistributionForString, MemberPercentageForString, FeeInformationForString, TransferEscrowOwnershipMsg, QueryMsg, MigrateMsg, BalanceVerified, Addr, ArrayOfMemberBalanceChecked, MemberBalanceChecked, DumpStateResponse, Boolean, OwnershipForString } from "./ArenaEscrow.types";
import { ArenaEscrowQueryClient, ArenaEscrowClient } from "./ArenaEscrow.client";
export const arenaEscrowQueryKeys = {
  contract: ([{
    contract: "arenaEscrow"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...arenaEscrowQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  balances: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "balances",
    args
  }] as const),
  balance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "balance",
    args
  }] as const),
  due: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "due",
    args
  }] as const),
  dues: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "dues",
    args
  }] as const),
  initialDues: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "initial_dues",
    args
  }] as const),
  isFunded: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "is_funded",
    args
  }] as const),
  isFullyFunded: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "is_fully_funded",
    args
  }] as const),
  totalBalance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "total_balance",
    args
  }] as const),
  isLocked: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "is_locked",
    args
  }] as const),
  dumpState: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "dump_state",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaEscrowQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export const arenaEscrowQueries = {
  balances: <TData = ArrayOfMemberBalanceChecked,>({
    client,
    args,
    options
  }: ArenaEscrowBalancesQuery<TData>): UseQueryOptions<ArrayOfMemberBalanceChecked, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.balances(client?.contractAddress, args),
    queryFn: () => client ? client.balances({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  balance: <TData = BalanceVerified,>({
    client,
    args,
    options
  }: ArenaEscrowBalanceQuery<TData>): UseQueryOptions<BalanceVerified, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.balance(client?.contractAddress, args),
    queryFn: () => client ? client.balance({
      addr: args.addr
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  due: <TData = BalanceVerified,>({
    client,
    args,
    options
  }: ArenaEscrowDueQuery<TData>): UseQueryOptions<BalanceVerified, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.due(client?.contractAddress, args),
    queryFn: () => client ? client.due({
      addr: args.addr
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dues: <TData = ArrayOfMemberBalanceChecked,>({
    client,
    args,
    options
  }: ArenaEscrowDuesQuery<TData>): UseQueryOptions<ArrayOfMemberBalanceChecked, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.dues(client?.contractAddress, args),
    queryFn: () => client ? client.dues({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  initialDues: <TData = ArrayOfMemberBalanceChecked,>({
    client,
    args,
    options
  }: ArenaEscrowInitialDuesQuery<TData>): UseQueryOptions<ArrayOfMemberBalanceChecked, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.initialDues(client?.contractAddress, args),
    queryFn: () => client ? client.initialDues({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  isFunded: <TData = Boolean,>({
    client,
    args,
    options
  }: ArenaEscrowIsFundedQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.isFunded(client?.contractAddress, args),
    queryFn: () => client ? client.isFunded({
      addr: args.addr
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  isFullyFunded: <TData = Boolean,>({
    client,
    options
  }: ArenaEscrowIsFullyFundedQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.isFullyFunded(client?.contractAddress),
    queryFn: () => client ? client.isFullyFunded() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalBalance: <TData = BalanceVerified,>({
    client,
    options
  }: ArenaEscrowTotalBalanceQuery<TData>): UseQueryOptions<BalanceVerified, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.totalBalance(client?.contractAddress),
    queryFn: () => client ? client.totalBalance() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  isLocked: <TData = Boolean,>({
    client,
    options
  }: ArenaEscrowIsLockedQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.isLocked(client?.contractAddress),
    queryFn: () => client ? client.isLocked() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dumpState: <TData = DumpStateResponse,>({
    client,
    args,
    options
  }: ArenaEscrowDumpStateQuery<TData>): UseQueryOptions<DumpStateResponse, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.dumpState(client?.contractAddress, args),
    queryFn: () => client ? client.dumpState({
      addr: args.addr
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForString,>({
    client,
    options
  }: ArenaEscrowOwnershipQuery<TData>): UseQueryOptions<OwnershipForString, Error, TData> => ({
    queryKey: arenaEscrowQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client ? client.ownership() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface ArenaEscrowReactQuery<TResponse, TData = TResponse> {
  client: ArenaEscrowQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaEscrowOwnershipQuery<TData> extends ArenaEscrowReactQuery<OwnershipForString, TData> {}
export function useArenaEscrowOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: ArenaEscrowOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(arenaEscrowQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowDumpStateQuery<TData> extends ArenaEscrowReactQuery<DumpStateResponse, TData> {
  args: {
    addr?: string;
  };
}
export function useArenaEscrowDumpStateQuery<TData = DumpStateResponse>({
  client,
  args,
  options
}: ArenaEscrowDumpStateQuery<TData>) {
  return useQuery<DumpStateResponse, Error, TData>(arenaEscrowQueryKeys.dumpState(client?.contractAddress, args), () => client ? client.dumpState({
    addr: args.addr
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowIsLockedQuery<TData> extends ArenaEscrowReactQuery<Boolean, TData> {}
export function useArenaEscrowIsLockedQuery<TData = Boolean>({
  client,
  options
}: ArenaEscrowIsLockedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(arenaEscrowQueryKeys.isLocked(client?.contractAddress), () => client ? client.isLocked() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowTotalBalanceQuery<TData> extends ArenaEscrowReactQuery<BalanceVerified, TData> {}
export function useArenaEscrowTotalBalanceQuery<TData = BalanceVerified>({
  client,
  options
}: ArenaEscrowTotalBalanceQuery<TData>) {
  return useQuery<BalanceVerified, Error, TData>(arenaEscrowQueryKeys.totalBalance(client?.contractAddress), () => client ? client.totalBalance() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowIsFullyFundedQuery<TData> extends ArenaEscrowReactQuery<Boolean, TData> {}
export function useArenaEscrowIsFullyFundedQuery<TData = Boolean>({
  client,
  options
}: ArenaEscrowIsFullyFundedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(arenaEscrowQueryKeys.isFullyFunded(client?.contractAddress), () => client ? client.isFullyFunded() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowIsFundedQuery<TData> extends ArenaEscrowReactQuery<Boolean, TData> {
  args: {
    addr: string;
  };
}
export function useArenaEscrowIsFundedQuery<TData = Boolean>({
  client,
  args,
  options
}: ArenaEscrowIsFundedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(arenaEscrowQueryKeys.isFunded(client?.contractAddress, args), () => client ? client.isFunded({
    addr: args.addr
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowInitialDuesQuery<TData> extends ArenaEscrowReactQuery<ArrayOfMemberBalanceChecked, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useArenaEscrowInitialDuesQuery<TData = ArrayOfMemberBalanceChecked>({
  client,
  args,
  options
}: ArenaEscrowInitialDuesQuery<TData>) {
  return useQuery<ArrayOfMemberBalanceChecked, Error, TData>(arenaEscrowQueryKeys.initialDues(client?.contractAddress, args), () => client ? client.initialDues({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowDuesQuery<TData> extends ArenaEscrowReactQuery<ArrayOfMemberBalanceChecked, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useArenaEscrowDuesQuery<TData = ArrayOfMemberBalanceChecked>({
  client,
  args,
  options
}: ArenaEscrowDuesQuery<TData>) {
  return useQuery<ArrayOfMemberBalanceChecked, Error, TData>(arenaEscrowQueryKeys.dues(client?.contractAddress, args), () => client ? client.dues({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowDueQuery<TData> extends ArenaEscrowReactQuery<BalanceVerified, TData> {
  args: {
    addr: string;
  };
}
export function useArenaEscrowDueQuery<TData = BalanceVerified>({
  client,
  args,
  options
}: ArenaEscrowDueQuery<TData>) {
  return useQuery<BalanceVerified, Error, TData>(arenaEscrowQueryKeys.due(client?.contractAddress, args), () => client ? client.due({
    addr: args.addr
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowBalanceQuery<TData> extends ArenaEscrowReactQuery<BalanceVerified, TData> {
  args: {
    addr: string;
  };
}
export function useArenaEscrowBalanceQuery<TData = BalanceVerified>({
  client,
  args,
  options
}: ArenaEscrowBalanceQuery<TData>) {
  return useQuery<BalanceVerified, Error, TData>(arenaEscrowQueryKeys.balance(client?.contractAddress, args), () => client ? client.balance({
    addr: args.addr
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowBalancesQuery<TData> extends ArenaEscrowReactQuery<ArrayOfMemberBalanceChecked, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useArenaEscrowBalancesQuery<TData = ArrayOfMemberBalanceChecked>({
  client,
  args,
  options
}: ArenaEscrowBalancesQuery<TData>) {
  return useQuery<ArrayOfMemberBalanceChecked, Error, TData>(arenaEscrowQueryKeys.balances(client?.contractAddress, args), () => client ? client.balances({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaEscrowUpdateOwnershipMutation {
  client: ArenaEscrowClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaEscrowUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaEscrowUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaEscrowUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface ArenaEscrowClawMutation {
  client: ArenaEscrowClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaEscrowClawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaEscrowClawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaEscrowClawMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claw(fee, memo, funds), options);
}
export interface ArenaEscrowLockMutation {
  client: ArenaEscrowClient;
  msg: {
    transferOwnership?: TransferEscrowOwnershipMsg;
    value: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaEscrowLockMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaEscrowLockMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaEscrowLockMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.lock(msg, fee, memo, funds), options);
}
export interface ArenaEscrowDistributeMutation {
  client: ArenaEscrowClient;
  msg: {
    activationHeight?: number;
    distribution?: DistributionForString;
    groupContract: string;
    layeredFees?: FeeInformationForString[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaEscrowDistributeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaEscrowDistributeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaEscrowDistributeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.distribute(msg, fee, memo, funds), options);
}
export interface ArenaEscrowReceiveNftMutation {
  client: ArenaEscrowClient;
  msg: {
    msg: Binary;
    sender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaEscrowReceiveNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaEscrowReceiveNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaEscrowReceiveNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receiveNft(msg, fee, memo, funds), options);
}
export interface ArenaEscrowReceiveMutation {
  client: ArenaEscrowClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaEscrowReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaEscrowReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaEscrowReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}
export interface ArenaEscrowReceiveNativeMutation {
  client: ArenaEscrowClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaEscrowReceiveNativeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaEscrowReceiveNativeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaEscrowReceiveNativeMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receiveNative(fee, memo, funds), options);
}
export interface ArenaEscrowEnrollmentWithdrawMutation {
  client: ArenaEscrowClient;
  msg: {
    addrs: string[];
    entryFee: Coin;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaEscrowEnrollmentWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaEscrowEnrollmentWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaEscrowEnrollmentWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.enrollmentWithdraw(msg, fee, memo, funds), options);
}
export interface ArenaEscrowWithdrawMutation {
  client: ArenaEscrowClient;
  msg: {
    cw20Msg?: Binary;
    cw721Msg?: Binary;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaEscrowWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaEscrowWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaEscrowWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}