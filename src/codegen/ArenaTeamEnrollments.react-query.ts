/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, DaoConfigForUint64, Duration, Threshold, PercentageThreshold, Decimal, EntryStatus, ApplicantStatus, Action, Expiration, Timestamp, Uint64, QueryMsg, Addr, ApplicantResponse, TeamEntryResponse, ArrayOfApplicantResponse, ArrayOfTeamEntryResponse, ArrayOfAddr, OwnershipForString } from "./ArenaTeamEnrollments.types";
import { ArenaTeamEnrollmentsQueryClient, ArenaTeamEnrollmentsClient } from "./ArenaTeamEnrollments.client";
export const arenaTeamEnrollmentsQueryKeys = {
  contract: ([{
    contract: "arenaTeamEnrollments"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...arenaTeamEnrollmentsQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getEntry: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaTeamEnrollmentsQueryKeys.address(contractAddress)[0],
    method: "get_entry",
    args
  }] as const),
  listEntries: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaTeamEnrollmentsQueryKeys.address(contractAddress)[0],
    method: "list_entries",
    args
  }] as const),
  getApplicant: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaTeamEnrollmentsQueryKeys.address(contractAddress)[0],
    method: "get_applicant",
    args
  }] as const),
  listApplicants: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaTeamEnrollmentsQueryKeys.address(contractAddress)[0],
    method: "list_applicants",
    args
  }] as const),
  listTeams: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaTeamEnrollmentsQueryKeys.address(contractAddress)[0],
    method: "list_teams",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaTeamEnrollmentsQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export const arenaTeamEnrollmentsQueries = {
  getEntry: <TData = TeamEntryResponse,>({
    client,
    args,
    options
  }: ArenaTeamEnrollmentsGetEntryQuery<TData>): UseQueryOptions<TeamEntryResponse, Error, TData> => ({
    queryKey: arenaTeamEnrollmentsQueryKeys.getEntry(client?.contractAddress, args),
    queryFn: () => client ? client.getEntry({
      entryId: args.entryId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listEntries: <TData = ArrayOfTeamEntryResponse,>({
    client,
    args,
    options
  }: ArenaTeamEnrollmentsListEntriesQuery<TData>): UseQueryOptions<ArrayOfTeamEntryResponse, Error, TData> => ({
    queryKey: arenaTeamEnrollmentsQueryKeys.listEntries(client?.contractAddress, args),
    queryFn: () => client ? client.listEntries({
      categoryId: args.categoryId,
      limit: args.limit,
      startAfter: args.startAfter,
      status: args.status
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getApplicant: <TData = ApplicantResponse,>({
    client,
    args,
    options
  }: ArenaTeamEnrollmentsGetApplicantQuery<TData>): UseQueryOptions<ApplicantResponse, Error, TData> => ({
    queryKey: arenaTeamEnrollmentsQueryKeys.getApplicant(client?.contractAddress, args),
    queryFn: () => client ? client.getApplicant({
      applicant: args.applicant,
      entryId: args.entryId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listApplicants: <TData = ArrayOfApplicantResponse,>({
    client,
    args,
    options
  }: ArenaTeamEnrollmentsListApplicantsQuery<TData>): UseQueryOptions<ArrayOfApplicantResponse, Error, TData> => ({
    queryKey: arenaTeamEnrollmentsQueryKeys.listApplicants(client?.contractAddress, args),
    queryFn: () => client ? client.listApplicants({
      entryId: args.entryId,
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listTeams: <TData = ArrayOfAddr,>({
    client,
    args,
    options
  }: ArenaTeamEnrollmentsListTeamsQuery<TData>): UseQueryOptions<ArrayOfAddr, Error, TData> => ({
    queryKey: arenaTeamEnrollmentsQueryKeys.listTeams(client?.contractAddress, args),
    queryFn: () => client ? client.listTeams({
      limit: args.limit,
      startAfter: args.startAfter,
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForString,>({
    client,
    options
  }: ArenaTeamEnrollmentsOwnershipQuery<TData>): UseQueryOptions<OwnershipForString, Error, TData> => ({
    queryKey: arenaTeamEnrollmentsQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client ? client.ownership() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface ArenaTeamEnrollmentsReactQuery<TResponse, TData = TResponse> {
  client: ArenaTeamEnrollmentsQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaTeamEnrollmentsOwnershipQuery<TData> extends ArenaTeamEnrollmentsReactQuery<OwnershipForString, TData> {}
export function useArenaTeamEnrollmentsOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: ArenaTeamEnrollmentsOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(arenaTeamEnrollmentsQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaTeamEnrollmentsListTeamsQuery<TData> extends ArenaTeamEnrollmentsReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number;
    startAfter?: string;
    user: string;
  };
}
export function useArenaTeamEnrollmentsListTeamsQuery<TData = ArrayOfAddr>({
  client,
  args,
  options
}: ArenaTeamEnrollmentsListTeamsQuery<TData>) {
  return useQuery<ArrayOfAddr, Error, TData>(arenaTeamEnrollmentsQueryKeys.listTeams(client?.contractAddress, args), () => client ? client.listTeams({
    limit: args.limit,
    startAfter: args.startAfter,
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaTeamEnrollmentsListApplicantsQuery<TData> extends ArenaTeamEnrollmentsReactQuery<ArrayOfApplicantResponse, TData> {
  args: {
    entryId: number;
    limit?: number;
    startAfter?: string;
  };
}
export function useArenaTeamEnrollmentsListApplicantsQuery<TData = ArrayOfApplicantResponse>({
  client,
  args,
  options
}: ArenaTeamEnrollmentsListApplicantsQuery<TData>) {
  return useQuery<ArrayOfApplicantResponse, Error, TData>(arenaTeamEnrollmentsQueryKeys.listApplicants(client?.contractAddress, args), () => client ? client.listApplicants({
    entryId: args.entryId,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaTeamEnrollmentsGetApplicantQuery<TData> extends ArenaTeamEnrollmentsReactQuery<ApplicantResponse, TData> {
  args: {
    applicant: string;
    entryId: number;
  };
}
export function useArenaTeamEnrollmentsGetApplicantQuery<TData = ApplicantResponse>({
  client,
  args,
  options
}: ArenaTeamEnrollmentsGetApplicantQuery<TData>) {
  return useQuery<ApplicantResponse, Error, TData>(arenaTeamEnrollmentsQueryKeys.getApplicant(client?.contractAddress, args), () => client ? client.getApplicant({
    applicant: args.applicant,
    entryId: args.entryId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaTeamEnrollmentsListEntriesQuery<TData> extends ArenaTeamEnrollmentsReactQuery<ArrayOfTeamEntryResponse, TData> {
  args: {
    categoryId?: Uint128;
    limit?: number;
    startAfter?: number;
    status?: EntryStatus;
  };
}
export function useArenaTeamEnrollmentsListEntriesQuery<TData = ArrayOfTeamEntryResponse>({
  client,
  args,
  options
}: ArenaTeamEnrollmentsListEntriesQuery<TData>) {
  return useQuery<ArrayOfTeamEntryResponse, Error, TData>(arenaTeamEnrollmentsQueryKeys.listEntries(client?.contractAddress, args), () => client ? client.listEntries({
    categoryId: args.categoryId,
    limit: args.limit,
    startAfter: args.startAfter,
    status: args.status
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaTeamEnrollmentsGetEntryQuery<TData> extends ArenaTeamEnrollmentsReactQuery<TeamEntryResponse, TData> {
  args: {
    entryId: number;
  };
}
export function useArenaTeamEnrollmentsGetEntryQuery<TData = TeamEntryResponse>({
  client,
  args,
  options
}: ArenaTeamEnrollmentsGetEntryQuery<TData>) {
  return useQuery<TeamEntryResponse, Error, TData>(arenaTeamEnrollmentsQueryKeys.getEntry(client?.contractAddress, args), () => client ? client.getEntry({
    entryId: args.entryId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaTeamEnrollmentsUpdateOwnershipMutation {
  client: ArenaTeamEnrollmentsClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaTeamEnrollmentsUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaTeamEnrollmentsUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaTeamEnrollmentsUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface ArenaTeamEnrollmentsUpdateApplicantStatusMutation {
  client: ArenaTeamEnrollmentsClient;
  msg: {
    applicant: string;
    entryId: number;
    status: ApplicantStatus;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaTeamEnrollmentsUpdateApplicantStatusMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaTeamEnrollmentsUpdateApplicantStatusMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaTeamEnrollmentsUpdateApplicantStatusMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateApplicantStatus(msg, fee, memo, funds), options);
}
export interface ArenaTeamEnrollmentsWithdrawApplicationMutation {
  client: ArenaTeamEnrollmentsClient;
  msg: {
    entryId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaTeamEnrollmentsWithdrawApplicationMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaTeamEnrollmentsWithdrawApplicationMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaTeamEnrollmentsWithdrawApplicationMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdrawApplication(msg, fee, memo, funds), options);
}
export interface ArenaTeamEnrollmentsApplyMutation {
  client: ArenaTeamEnrollmentsClient;
  msg: {
    entryId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaTeamEnrollmentsApplyMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaTeamEnrollmentsApplyMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaTeamEnrollmentsApplyMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.apply(msg, fee, memo, funds), options);
}
export interface ArenaTeamEnrollmentsUpdateEntryStatusMutation {
  client: ArenaTeamEnrollmentsClient;
  msg: {
    entryId: number;
    status: EntryStatus;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaTeamEnrollmentsUpdateEntryStatusMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaTeamEnrollmentsUpdateEntryStatusMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaTeamEnrollmentsUpdateEntryStatusMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateEntryStatus(msg, fee, memo, funds), options);
}
export interface ArenaTeamEnrollmentsCreateEntryMutation {
  client: ArenaTeamEnrollmentsClient;
  msg: {
    categoryId?: Uint128;
    daoConfig: DaoConfigForUint64;
    description: string;
    title: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaTeamEnrollmentsCreateEntryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaTeamEnrollmentsCreateEntryMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaTeamEnrollmentsCreateEntryMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createEntry(msg, fee, memo, funds), options);
}