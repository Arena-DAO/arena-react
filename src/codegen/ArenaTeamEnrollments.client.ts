/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, MemberBalanceUnchecked, Cw20Coin, Cw721Collection, Coin, ExecuteMsg, Binary, Decimal, Action, Expiration, Timestamp, Uint64, Cw20ReceiveMsg, Cw721ReceiveMsg, DistributionForString, MemberPercentageForString, FeeInformationForString, TransferEscrowOwnershipMsg, QueryMsg, MigrateMsg, BalanceVerified, Addr, ArrayOfMemberBalanceChecked, MemberBalanceChecked, DumpStateResponse, Boolean, OwnershipForString } from "./ArenaTeamEnrollments.types";
export interface ArenaTeamEnrollmentsReadOnlyInterface {
  contractAddress: string;
  balances: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfMemberBalanceChecked>;
  balance: ({
    addr
  }: {
    addr: string;
  }) => Promise<BalanceVerified>;
  due: ({
    addr
  }: {
    addr: string;
  }) => Promise<BalanceVerified>;
  dues: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfMemberBalanceChecked>;
  initialDues: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfMemberBalanceChecked>;
  isFunded: ({
    addr
  }: {
    addr: string;
  }) => Promise<Boolean>;
  isFullyFunded: () => Promise<Boolean>;
  totalBalance: () => Promise<BalanceVerified>;
  isLocked: () => Promise<Boolean>;
  dumpState: ({
    addr
  }: {
    addr?: string;
  }) => Promise<DumpStateResponse>;
  ownership: () => Promise<OwnershipForString>;
}
export class ArenaTeamEnrollmentsQueryClient implements ArenaTeamEnrollmentsReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.balances = this.balances.bind(this);
    this.balance = this.balance.bind(this);
    this.due = this.due.bind(this);
    this.dues = this.dues.bind(this);
    this.initialDues = this.initialDues.bind(this);
    this.isFunded = this.isFunded.bind(this);
    this.isFullyFunded = this.isFullyFunded.bind(this);
    this.totalBalance = this.totalBalance.bind(this);
    this.isLocked = this.isLocked.bind(this);
    this.dumpState = this.dumpState.bind(this);
    this.ownership = this.ownership.bind(this);
  }
  balances = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfMemberBalanceChecked> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balances: {
        limit,
        start_after: startAfter
      }
    });
  };
  balance = async ({
    addr
  }: {
    addr: string;
  }): Promise<BalanceVerified> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balance: {
        addr
      }
    });
  };
  due = async ({
    addr
  }: {
    addr: string;
  }): Promise<BalanceVerified> => {
    return this.client.queryContractSmart(this.contractAddress, {
      due: {
        addr
      }
    });
  };
  dues = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfMemberBalanceChecked> => {
    return this.client.queryContractSmart(this.contractAddress, {
      dues: {
        limit,
        start_after: startAfter
      }
    });
  };
  initialDues = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfMemberBalanceChecked> => {
    return this.client.queryContractSmart(this.contractAddress, {
      initial_dues: {
        limit,
        start_after: startAfter
      }
    });
  };
  isFunded = async ({
    addr
  }: {
    addr: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_funded: {
        addr
      }
    });
  };
  isFullyFunded = async (): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_fully_funded: {}
    });
  };
  totalBalance = async (): Promise<BalanceVerified> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_balance: {}
    });
  };
  isLocked = async (): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_locked: {}
    });
  };
  dumpState = async ({
    addr
  }: {
    addr?: string;
  }): Promise<DumpStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      dump_state: {
        addr
      }
    });
  };
  ownership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {}
    });
  };
}
export interface ArenaTeamEnrollmentsInterface extends ArenaTeamEnrollmentsReadOnlyInterface {
  contractAddress: string;
  sender: string;
  withdraw: ({
    cw20Msg,
    cw721Msg
  }: {
    cw20Msg?: Binary;
    cw721Msg?: Binary;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  enrollmentWithdraw: ({
    addrs,
    entryFee
  }: {
    addrs: string[];
    entryFee: Coin;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  receiveNative: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  receiveNft: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  distribute: ({
    activationHeight,
    distribution,
    groupContract,
    layeredFees
  }: {
    activationHeight?: number;
    distribution?: DistributionForString;
    groupContract: string;
    layeredFees?: FeeInformationForString[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  lock: ({
    transferOwnership,
    value
  }: {
    transferOwnership?: TransferEscrowOwnershipMsg;
    value: boolean;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  claw: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class ArenaTeamEnrollmentsClient extends ArenaTeamEnrollmentsQueryClient implements ArenaTeamEnrollmentsInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.withdraw = this.withdraw.bind(this);
    this.enrollmentWithdraw = this.enrollmentWithdraw.bind(this);
    this.receiveNative = this.receiveNative.bind(this);
    this.receive = this.receive.bind(this);
    this.receiveNft = this.receiveNft.bind(this);
    this.distribute = this.distribute.bind(this);
    this.lock = this.lock.bind(this);
    this.claw = this.claw.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
  withdraw = async ({
    cw20Msg,
    cw721Msg
  }: {
    cw20Msg?: Binary;
    cw721Msg?: Binary;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        cw20_msg: cw20Msg,
        cw721_msg: cw721Msg
      }
    }, fee_, memo_, funds_);
  };
  enrollmentWithdraw = async ({
    addrs,
    entryFee
  }: {
    addrs: string[];
    entryFee: Coin;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      enrollment_withdraw: {
        addrs,
        entry_fee: entryFee
      }
    }, fee_, memo_, funds_);
  };
  receiveNative = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_native: {}
    }, fee_, memo_, funds_);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee_, memo_, funds_);
  };
  receiveNft = async ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_nft: {
        msg,
        sender,
        token_id: tokenId
      }
    }, fee_, memo_, funds_);
  };
  distribute = async ({
    activationHeight,
    distribution,
    groupContract,
    layeredFees
  }: {
    activationHeight?: number;
    distribution?: DistributionForString;
    groupContract: string;
    layeredFees?: FeeInformationForString[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute: {
        activation_height: activationHeight,
        distribution,
        group_contract: groupContract,
        layered_fees: layeredFees
      }
    }, fee_, memo_, funds_);
  };
  lock = async ({
    transferOwnership,
    value
  }: {
    transferOwnership?: TransferEscrowOwnershipMsg;
    value: boolean;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lock: {
        transfer_ownership: transferOwnership,
        value
      }
    }, fee_, memo_, funds_);
  };
  claw = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claw: {}
    }, fee_, memo_, funds_);
  };
  updateOwnership = async (action: Action, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee_, memo_, funds_);
  };
}