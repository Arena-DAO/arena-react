/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, DepositToken, UncheckedDenom, VotingModuleTokenType, DepositRefundPolicy, PreProposeSubmissionPolicy, Addr, InstantiateMsg, UncheckedDepositInfo, Empty, ExecuteMsg, ProposeMessage, CosmosMsgForEmpty, BankMsg, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Decimal, Vote, Status, Expiration, Coin, IbcTimeout, IbcTimeoutBlock, WeightedVoteOption, SingleChoiceAutoVote, QueryMsg, MigrateMsg, Boolean, CheckedDenom, Config, CheckedDepositInfo, DepositInfoResponse, InfoResponse, ContractVersion, HooksResponse } from "./DaoPreProposeSingle.types";
import { DaoPreProposeSingleQueryClient, DaoPreProposeSingleClient } from "./DaoPreProposeSingle.client";
export const daoPreProposeSingleQueryKeys = {
  contract: ([{
    contract: "daoPreProposeSingle"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...daoPreProposeSingleQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  proposalModule: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...daoPreProposeSingleQueryKeys.address(contractAddress)[0],
    method: "proposal_module",
    args
  }] as const),
  dao: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...daoPreProposeSingleQueryKeys.address(contractAddress)[0],
    method: "dao",
    args
  }] as const),
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...daoPreProposeSingleQueryKeys.address(contractAddress)[0],
    method: "info",
    args
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...daoPreProposeSingleQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  depositInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...daoPreProposeSingleQueryKeys.address(contractAddress)[0],
    method: "deposit_info",
    args
  }] as const),
  canPropose: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...daoPreProposeSingleQueryKeys.address(contractAddress)[0],
    method: "can_propose",
    args
  }] as const),
  proposalSubmittedHooks: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...daoPreProposeSingleQueryKeys.address(contractAddress)[0],
    method: "proposal_submitted_hooks",
    args
  }] as const),
  queryExtension: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...daoPreProposeSingleQueryKeys.address(contractAddress)[0],
    method: "query_extension",
    args
  }] as const)
};
export const daoPreProposeSingleQueries = {
  proposalModule: <TData = Addr,>({
    client,
    options
  }: DaoPreProposeSingleProposalModuleQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoPreProposeSingleQueryKeys.proposalModule(client?.contractAddress),
    queryFn: () => client ? client.proposalModule() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dao: <TData = Addr,>({
    client,
    options
  }: DaoPreProposeSingleDaoQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoPreProposeSingleQueryKeys.dao(client?.contractAddress),
    queryFn: () => client ? client.dao() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  info: <TData = InfoResponse,>({
    client,
    options
  }: DaoPreProposeSingleInfoQuery<TData>): UseQueryOptions<InfoResponse, Error, TData> => ({
    queryKey: daoPreProposeSingleQueryKeys.info(client?.contractAddress),
    queryFn: () => client ? client.info() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  config: <TData = Config,>({
    client,
    options
  }: DaoPreProposeSingleConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: daoPreProposeSingleQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  depositInfo: <TData = DepositInfoResponse,>({
    client,
    args,
    options
  }: DaoPreProposeSingleDepositInfoQuery<TData>): UseQueryOptions<DepositInfoResponse, Error, TData> => ({
    queryKey: daoPreProposeSingleQueryKeys.depositInfo(client?.contractAddress, args),
    queryFn: () => client ? client.depositInfo({
      proposalId: args.proposalId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  canPropose: <TData = Boolean,>({
    client,
    args,
    options
  }: DaoPreProposeSingleCanProposeQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: daoPreProposeSingleQueryKeys.canPropose(client?.contractAddress, args),
    queryFn: () => client ? client.canPropose({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  proposalSubmittedHooks: <TData = HooksResponse,>({
    client,
    options
  }: DaoPreProposeSingleProposalSubmittedHooksQuery<TData>): UseQueryOptions<HooksResponse, Error, TData> => ({
    queryKey: daoPreProposeSingleQueryKeys.proposalSubmittedHooks(client?.contractAddress),
    queryFn: () => client ? client.proposalSubmittedHooks() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  queryExtension: <TData = Binary,>({
    client,
    args,
    options
  }: DaoPreProposeSingleQueryExtensionQuery<TData>): UseQueryOptions<Binary, Error, TData> => ({
    queryKey: daoPreProposeSingleQueryKeys.queryExtension(client?.contractAddress, args),
    queryFn: () => client ? client.queryExtension({
      msg: args.msg
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface DaoPreProposeSingleReactQuery<TResponse, TData = TResponse> {
  client: DaoPreProposeSingleQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoPreProposeSingleQueryExtensionQuery<TData> extends DaoPreProposeSingleReactQuery<Binary, TData> {
  args: {
    msg: Empty;
  };
}
export function useDaoPreProposeSingleQueryExtensionQuery<TData = Binary>({
  client,
  args,
  options
}: DaoPreProposeSingleQueryExtensionQuery<TData>) {
  return useQuery<Binary, Error, TData>(daoPreProposeSingleQueryKeys.queryExtension(client?.contractAddress, args), () => client ? client.queryExtension({
    msg: args.msg
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeSingleProposalSubmittedHooksQuery<TData> extends DaoPreProposeSingleReactQuery<HooksResponse, TData> {}
export function useDaoPreProposeSingleProposalSubmittedHooksQuery<TData = HooksResponse>({
  client,
  options
}: DaoPreProposeSingleProposalSubmittedHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(daoPreProposeSingleQueryKeys.proposalSubmittedHooks(client?.contractAddress), () => client ? client.proposalSubmittedHooks() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeSingleCanProposeQuery<TData> extends DaoPreProposeSingleReactQuery<Boolean, TData> {
  args: {
    address: string;
  };
}
export function useDaoPreProposeSingleCanProposeQuery<TData = Boolean>({
  client,
  args,
  options
}: DaoPreProposeSingleCanProposeQuery<TData>) {
  return useQuery<Boolean, Error, TData>(daoPreProposeSingleQueryKeys.canPropose(client?.contractAddress, args), () => client ? client.canPropose({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeSingleDepositInfoQuery<TData> extends DaoPreProposeSingleReactQuery<DepositInfoResponse, TData> {
  args: {
    proposalId: number;
  };
}
export function useDaoPreProposeSingleDepositInfoQuery<TData = DepositInfoResponse>({
  client,
  args,
  options
}: DaoPreProposeSingleDepositInfoQuery<TData>) {
  return useQuery<DepositInfoResponse, Error, TData>(daoPreProposeSingleQueryKeys.depositInfo(client?.contractAddress, args), () => client ? client.depositInfo({
    proposalId: args.proposalId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeSingleConfigQuery<TData> extends DaoPreProposeSingleReactQuery<Config, TData> {}
export function useDaoPreProposeSingleConfigQuery<TData = Config>({
  client,
  options
}: DaoPreProposeSingleConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(daoPreProposeSingleQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeSingleInfoQuery<TData> extends DaoPreProposeSingleReactQuery<InfoResponse, TData> {}
export function useDaoPreProposeSingleInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoPreProposeSingleInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(daoPreProposeSingleQueryKeys.info(client?.contractAddress), () => client ? client.info() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeSingleDaoQuery<TData> extends DaoPreProposeSingleReactQuery<Addr, TData> {}
export function useDaoPreProposeSingleDaoQuery<TData = Addr>({
  client,
  options
}: DaoPreProposeSingleDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoPreProposeSingleQueryKeys.dao(client?.contractAddress), () => client ? client.dao() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeSingleProposalModuleQuery<TData> extends DaoPreProposeSingleReactQuery<Addr, TData> {}
export function useDaoPreProposeSingleProposalModuleQuery<TData = Addr>({
  client,
  options
}: DaoPreProposeSingleProposalModuleQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoPreProposeSingleQueryKeys.proposalModule(client?.contractAddress), () => client ? client.proposalModule() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeSingleProposalCompletedHookMutation {
  client: DaoPreProposeSingleClient;
  msg: {
    newStatus: Status;
    proposalId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeSingleProposalCompletedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeSingleProposalCompletedHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeSingleProposalCompletedHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.proposalCompletedHook(msg, fee, memo, funds), options);
}
export interface DaoPreProposeSingleRemoveProposalSubmittedHookMutation {
  client: DaoPreProposeSingleClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeSingleRemoveProposalSubmittedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeSingleRemoveProposalSubmittedHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeSingleRemoveProposalSubmittedHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeProposalSubmittedHook(msg, fee, memo, funds), options);
}
export interface DaoPreProposeSingleAddProposalSubmittedHookMutation {
  client: DaoPreProposeSingleClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeSingleAddProposalSubmittedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeSingleAddProposalSubmittedHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeSingleAddProposalSubmittedHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addProposalSubmittedHook(msg, fee, memo, funds), options);
}
export interface DaoPreProposeSingleExtensionMutation {
  client: DaoPreProposeSingleClient;
  msg: {
    msg: Empty;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeSingleExtensionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeSingleExtensionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeSingleExtensionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.extension(msg, fee, memo, funds), options);
}
export interface DaoPreProposeSingleWithdrawMutation {
  client: DaoPreProposeSingleClient;
  msg: {
    denom?: UncheckedDenom;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeSingleWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeSingleWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeSingleWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface DaoPreProposeSingleUpdateSubmissionPolicyMutation {
  client: DaoPreProposeSingleClient;
  msg: {
    allowlistAdd?: string[];
    allowlistRemove?: string[];
    denylistAdd?: string[];
    denylistRemove?: string[];
    setDaoMembers?: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeSingleUpdateSubmissionPolicyMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeSingleUpdateSubmissionPolicyMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeSingleUpdateSubmissionPolicyMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateSubmissionPolicy(msg, fee, memo, funds), options);
}
export interface DaoPreProposeSingleUpdateConfigMutation {
  client: DaoPreProposeSingleClient;
  msg: {
    depositInfo?: UncheckedDepositInfo;
    submissionPolicy?: PreProposeSubmissionPolicy;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeSingleUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeSingleUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeSingleUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface DaoPreProposeSingleProposeMutation {
  client: DaoPreProposeSingleClient;
  msg: {
    msg: ProposeMessage;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeSingleProposeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeSingleProposeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeSingleProposeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.propose(msg, fee, memo, funds), options);
}