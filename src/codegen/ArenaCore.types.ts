/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export type DepositToken = {
  token: {
    denom: UncheckedDenom;
  };
} | {
  voting_module_token: {
    token_type: VotingModuleTokenType;
  };
};
export type UncheckedDenom = {
  native: string;
} | {
  cw20: string;
};
export type VotingModuleTokenType = "native" | "cw20";
export type DepositRefundPolicy = "always" | "only_passed" | "never";
export type Admin = {
  address: {
    addr: string;
  };
} | {
  core_module: {};
};
export type Binary = string;
export type Duration = {
  height: number;
} | {
  time: number;
};
export type Decimal = string;
export type PreProposeSubmissionPolicy = {
  anyone: {
    denylist: Addr[];
  };
} | {
  specific: {
    allowlist: Addr[];
    dao_members: boolean;
    denylist: Addr[];
  };
};
export type Addr = string;
export interface InstantiateMsg {
  deposit_info?: UncheckedDepositInfo | null;
  extension: InstantiateExt;
  submission_policy: PreProposeSubmissionPolicy;
}
export interface UncheckedDepositInfo {
  amount: Uint128;
  denom: DepositToken;
  refund_policy: DepositRefundPolicy;
}
export interface InstantiateExt {
  categories?: NewCompetitionCategory[] | null;
  competition_modules_instantiate_info?: ModuleInstantiateInfo[] | null;
  payment_registry?: string | null;
  rating_period: Duration;
  rulesets?: NewRuleset[] | null;
  tax: Decimal;
  tax_configuration: TaxConfiguration;
}
export interface NewCompetitionCategory {
  name: string;
}
export interface ModuleInstantiateInfo {
  admin?: Admin | null;
  code_id: number;
  funds?: Coin[] | null;
  label: string;
  msg: Binary;
  salt?: Binary | null;
}
export interface Coin {
  amount: Uint128;
  denom: string;
}
export interface NewRuleset {
  category_id: Uint128;
  description: string;
  rules: string[];
}
export interface TaxConfiguration {
  cw20_msg?: Binary | null;
  cw721_msg?: Binary | null;
}
export type ExecuteMsg = {
  propose: {
    msg: ProposeMessage;
  };
} | {
  update_config: {
    deposit_info?: UncheckedDepositInfo | null;
    submission_policy?: PreProposeSubmissionPolicy | null;
  };
} | {
  update_submission_policy: {
    allowlist_add?: string[] | null;
    allowlist_remove?: string[] | null;
    denylist_add?: string[] | null;
    denylist_remove?: string[] | null;
    set_dao_members?: boolean | null;
  };
} | {
  withdraw: {
    denom?: UncheckedDenom | null;
  };
} | {
  extension: {
    msg: ExecuteExt;
  };
} | {
  add_proposal_submitted_hook: {
    address: string;
  };
} | {
  remove_proposal_submitted_hook: {
    address: string;
  };
} | {
  proposal_completed_hook: {
    new_status: Status;
    proposal_id: number;
  };
};
export type ExecuteExt = {
  update_competition_modules: {
    to_add?: ModuleInstantiateInfo[] | null;
    to_disable?: string[] | null;
  };
} | {
  update_tax: {
    tax: Decimal;
  };
} | {
  update_rulesets: {
    to_add?: NewRuleset[] | null;
    to_disable?: Uint128[] | null;
  };
} | {
  update_categories: {
    to_add?: NewCompetitionCategory[] | null;
    to_edit?: EditCompetitionCategory[] | null;
  };
} | {
  adjust_ratings: {
    category_id: Uint128;
    member_results: [MemberResultForString, MemberResultForString][];
  };
} | {
  update_rating_period: {
    period: Duration;
  };
} | {
  update_enrollment_modules: {
    to_add?: string[] | null;
    to_remove?: string[] | null;
  };
} | {
  set_payment_registry: {
    addr: string;
  };
};
export type EditCompetitionCategory = {
  disable: {
    category_id: Uint128;
  };
} | {
  edit: {
    category_id: Uint128;
    name: string;
  };
};
export type Status = "open" | "rejected" | "passed" | "executed" | "closed" | "execution_failed" | {
  veto_timelock: {
    expiration: Expiration;
  };
} | "vetoed";
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type Uint64 = string;
export interface ProposeMessage {
  competition_id: Uint128;
  description: string;
  distribution?: DistributionForString | null;
  originator: string;
  title: string;
}
export interface DistributionForString {
  member_percentages: MemberPercentageForString[];
  remainder_addr: string;
}
export interface MemberPercentageForString {
  addr: string;
  percentage: Decimal;
}
export interface MemberResultForString {
  addr: string;
  result: Decimal;
}
export type QueryMsg = {
  proposal_module: {};
} | {
  dao: {};
} | {
  info: {};
} | {
  config: {};
} | {
  deposit_info: {
    proposal_id: number;
  };
} | {
  can_propose: {
    address: string;
  };
} | {
  proposal_submitted_hooks: {};
} | {
  query_extension: {
    msg: QueryExt;
  };
};
export type QueryExt = {
  competitions: {
    enrollment_module?: string | null;
    filter?: CompetitionsFilter | null;
  };
} | {
  competition_modules: {
    include_disabled?: boolean | null;
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  ruleset: {
    id: Uint128;
  };
} | {
  rulesets: {
    category_id: Uint128;
    include_disabled?: boolean | null;
    limit?: number | null;
    start_after?: Uint128 | null;
  };
} | {
  tax: {
    height?: number | null;
  };
} | {
  competition_module: {
    query: CompetitionModuleQuery;
  };
} | {
  category: {
    id: Uint128;
  };
} | {
  categories: {
    include_disabled?: boolean | null;
    limit?: number | null;
    start_after?: Uint128 | null;
  };
} | {
  is_valid_category_and_rulesets: {
    category_id: Uint128;
    rulesets: Uint128[];
  };
} | {
  is_valid_enrollment_module: {
    addr: string;
  };
} | {
  dump_state: {};
} | {
  tax_config: {
    height: number;
  };
} | {
  rating: {
    addr: string;
    category_id: Uint128;
  };
} | {
  rating_leaderboard: {
    category_id: Uint128;
    limit?: number | null;
    start_after?: [Uint128, string] | null;
  };
} | {
  rating_period: {};
} | {
  payment_registry: {};
};
export type CompetitionsFilter = {
  competition_status: {
    status: CompetitionStatus;
  };
} | {
  category: {
    id?: Uint128 | null;
  };
} | {
  host: string;
};
export type CompetitionStatus = ("pending" | "inactive") | {
  active: {
    activation_height: number;
  };
} | {
  jailed: {
    activation_height: number;
  };
};
export type CompetitionModuleQuery = {
  key: [string, number | null];
} | {
  addr: string;
};
export type MigrateMsg = {
  from_under_v250: {
    policy?: PreProposeSubmissionPolicy | null;
  };
} | {
  extension: {
    msg: MigrateExt;
  };
};
export type MigrateExt = {
  from_compatible: {};
} | {
  patch: string;
};
export interface SudoMsg {
  competition_category: CompetitionCategory;
  dump_state_response: DumpStateResponse;
  rating: Rating;
  ruleset: Ruleset;
}
export interface CompetitionCategory {
  id: Uint128;
  is_enabled: boolean;
  name: string;
}
export interface DumpStateResponse {
  competition_modules: CompetitionModuleResponseForString[];
  tax: Decimal;
}
export interface CompetitionModuleResponseForString {
  addr: string;
  competition_count: Uint128;
  is_enabled: boolean;
  key: string;
}
export interface Rating {
  last_block?: BlockInfo | null;
  phi: Decimal;
  sigma: Decimal;
  value: Decimal;
}
export interface BlockInfo {
  chain_id: string;
  height: number;
  time: Timestamp;
}
export interface Ruleset {
  category_id: Uint128;
  description: string;
  id: Uint128;
  is_enabled: boolean;
  rules: string[];
}
export type Boolean = boolean;
export type CheckedDenom = {
  native: string;
} | {
  cw20: Addr;
};
export interface Config {
  deposit_info?: CheckedDepositInfo | null;
  submission_policy: PreProposeSubmissionPolicy;
}
export interface CheckedDepositInfo {
  amount: Uint128;
  denom: CheckedDenom;
  refund_policy: DepositRefundPolicy;
}
export interface DepositInfoResponse {
  deposit_info?: CheckedDepositInfo | null;
  proposer: Addr;
}
export interface InfoResponse {
  info: ContractVersion;
}
export interface ContractVersion {
  contract: string;
  version: string;
}
export interface HooksResponse {
  hooks: string[];
}